[ Description ]
A file extension handling issue was found in [core] module of ONLYOFFICE
DocumentServer v4.2.0.236-v5.6.4.13. An attacker must request the conversion
of the crafted file from DOCT into DOCX format. Using the chain of two other
bugs related to improper string handling, an attacker can achieve remote code
execution on DocumentServer. 

[Vulnerability Type]
Chain of several bugs lead to RCE on remote server: File Handling Issues (CWE-23),
Incorrect string manipulation (CWE-129), Improper Neutralization of Null Byte or
NUL Character (CWE-158)

[Affected Code Base]
DocumentServer: https://github.com/ONLYOFFICE/DocumentServer
affected versions: v4.2.0.236 - v5.6.4.13; fixed version: v6.1.0.27

core: https://github.com/ONLYOFFICE/core
affected versions: v4.2.0.236 - v5.6.4.13; fixed version: v6.0.0.59

[Affected Component]
Affected module: https://github.com/ONLYOFFICE/core/tree/v5.6.4.13
Affected functions:
  PPTX::Logic::UniFill::fromPPTY,
  NSBinPptxRW::_imageManager2Info NSBinPptxRW::CImageManager2::GenerateImage,
  NSBinPptxRW::CBinaryFileReader::GetString3
Affected executable: x2t

[Attack Type]
Remote

[Impact]
Code Execution
Denial of Service

[Attack Vectors]
To exploit this vulnerability, an attacker must request the conversion of 
the crafted file from DOCT into DOCX format. DocumentServer supports the
processing of inlined images inside of DOCT binary file. There is no 
validation on a file extension data (fromPPTY function), hence an 
attacker can pass controlled data into the file extension and eventually
be able to overwrite arbitrary files on DocumentServer filesystem. It 
is important to notice that after processing the created (i.e. 
overwritten in this case) file is then removed because it's considered 
temporary. To prevent such behavior two other bugs come into play and 
DocumentServer crashes before it removes the target file. This chain 
allows an attacker to overwrite arbitrary files and eventually gets 
remote code execution on remote DocumentServer by overwriting x2t binary
(responsible for format conversion) and then sending a new request 
triggering the payload already written into x2t binary (reverse shell 
for example)
